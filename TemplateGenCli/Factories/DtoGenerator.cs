
using System.Text;
using TemplateGenCli.Extensions;
using TemplateGenCli.Interfaces;
using TemplateGenCli.Models;

namespace TemplateGenCli.Factories;

public class DtoGenerator : IGenerator
{
    public void Run(IGeneratorConfig config, GeneratorContext context)
    {
        var dtoConfig = (DtoConfig)config;
        var entityConfig = context.EntityConfig;
        var structureConfig = context.StructureConfig;

        var oriNamespace = dtoConfig.Namespace;


        if (!Directory.Exists(entityConfig.Path))
        {
            Console.WriteLine($"Entities path not found: {entityConfig.Path}");
            return;
        }

        Directory.CreateDirectory(dtoConfig.OutputPath);

        if (entityConfig.ExceptEntities.Any(e => e.Contains(" ")))
        {
            Console.WriteLine("Warning: Entity exclusion list may contain invalid names. Make sure they match exact entity class names.");
        }

        var entityFiles = entityConfig.Path.GetEntitiesFilePath(entityConfig.ExceptEntities);
        if (entityFiles.Count == 0)
        {
            Console.WriteLine("No entity files found.");
            return;
        }

        foreach (var file in entityFiles)
        {
            var entityName = Path.GetFileNameWithoutExtension(file);
            if (string.IsNullOrEmpty(entityName) || string.IsNullOrEmpty(file))
            {
                Console.WriteLine($"Skipping empty file: {file}");
                continue;
            }

            string modularName = "";
            if (structureConfig.Enable)
            {
                modularName = file.GetModularName(structureConfig.ModularAttributeName);
                if (string.IsNullOrEmpty(modularName))
                {
                    Console.WriteLine($"Modular name not found in file: {file}");
                }
                else
                {
                    dtoConfig.Namespace = $"{oriNamespace}.{modularName}";
                    if (structureConfig.DtoModular)
                    {
                        var path = Path.Combine(dtoConfig.OutputPath, modularName);
                        Directory.CreateDirectory(path);

                    }
                    else
                    {
                        var path = Path.Combine(dtoConfig.OutputPath, modularName, entityName);
                        Directory.CreateDirectory(path);
                    }
                }
            }

            dtoConfig.Namespace = $"{dtoConfig.Namespace}.{entityName}";

            var dtoName = $"{entityName}Dto";

            var dtoPath = Path.Combine(
                dtoConfig.OutputPath,
                structureConfig.ServiceInterfaceModular ? modularName : "",
                entityName,
                $"{dtoName}.cs"
                );
            if (!File.Exists(dtoPath))
            {
                var code = GenerateDtoCode(dtoName, dtoConfig);
                File.WriteAllText(dtoPath, code, Encoding.UTF8);
                Console.WriteLine($"Created: {dtoPath}");
            }

            var updateName = $"Update{entityName}Dto";
            var updatePath = Path.Combine(
       dtoConfig.OutputPath,
       structureConfig.ServiceInterfaceModular ? modularName : "",
       entityName,
       $"{updateName}.cs"
       );
            if (!File.Exists(updatePath))
            {
                var code = GenerateDtoCode(updateName, dtoConfig);
                File.WriteAllText(updatePath, code, Encoding.UTF8);
                Console.WriteLine($"Created: {updatePath}");
            }

            var createName = $"Create{entityName}Dto";
            var createPath = Path.Combine(
       dtoConfig.OutputPath,
       structureConfig.ServiceInterfaceModular ? modularName : "",
       entityName,
       $"{createName}.cs"
       );
            if (!File.Exists(createPath))
            {
                var code = GenerateDtoCode(createName, dtoConfig);
                File.WriteAllText(createPath, code, Encoding.UTF8);
            }
        }
    }

    private string GenerateDtoCode(string name, DtoConfig config) => $@"namespace {config.Namespace};

// <auto-generated />
public class {name}Dto
{{
    // Add properties here
}}";
}
