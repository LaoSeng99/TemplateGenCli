using System.Text;
using TemplateGenCli.Extensions;
using TemplateGenCli.Interfaces;
using TemplateGenCli.Models;

namespace TemplateGenCli.Factories;

public class MapsterGenerator() : IGenerator
{
    public void Run(IGeneratorConfig config, GeneratorContext context)
    {
        var mapsterConfig = (MapsterConfig)config;
        var entityConfig = context.EntityConfig;
        var structureConfig = context.StructureConfig;
        var oriNamespace = mapsterConfig.Namespace;
        if (!Directory.Exists(entityConfig.Path))
        {
            Console.WriteLine($"Entities path not found: {entityConfig.Path}");
            return;
        }

        Directory.CreateDirectory(mapsterConfig.OutputPath);

        var entityFiles = entityConfig.Path.GetEntitiesFilePath(entityConfig.ExceptEntities);
        if (entityFiles.Count == 0)
        {
            Console.WriteLine("No entity files found.");
            return;
        }

        var newConfigNames = new List<string>();
        foreach (var file in entityFiles)
        {
            var entityName = Path.GetFileNameWithoutExtension(file);
            if (string.IsNullOrEmpty(entityName) || string.IsNullOrEmpty(file))
            {
                Console.WriteLine($"Skipping empty file: {file}");
                continue;
            }

            string modularName = "";
            if (structureConfig.Enable)
            {
                modularName = file.GetModularName(structureConfig.ModularAttributeName);
                if (string.IsNullOrEmpty(modularName))
                {
                    Console.WriteLine($"Modular name not found in file: {file}");
                }
                else
                {
                    mapsterConfig.Namespace = $"{oriNamespace}.{modularName}";
                    if (structureConfig.MapsterModular)
                    {
                        var path = Path.Combine(mapsterConfig.OutputPath, modularName);
                        Directory.CreateDirectory(path);
                    }
                }
            }

            var targetFile = Path.Combine(
                mapsterConfig.OutputPath,
                structureConfig.MapsterModular ? modularName : "",
                $"{entityName}MapsterConfig.cs"
                );

            if (!File.Exists(targetFile))
            {
                File.WriteAllText(targetFile, GenerateCode(entityName, entityConfig.Namespace, mapsterConfig.Namespace), Encoding.UTF8);
                Console.WriteLine($"Created: {targetFile}");
            }

            newConfigNames.Add($"{entityName}MapsterConfig");
        }

        InjectToMapsterConfig(mapsterConfig.ConfigFile, newConfigNames, mapsterConfig.StartMark, mapsterConfig.EndMark);
    }

    private string GenerateCode(string entityName, string entityNamespace, string configNamespace) => $@"using Mapster;
using {entityNamespace};

namespace {configNamespace};

// <auto-generated />
public class {entityName}MapsterConfig : IMapsterConfig
{{
    public void Register(TypeAdapterConfig config)
    {{
        config.ForType<{entityName}, {entityName}>();
    }}
}}
        ";

    private void InjectToMapsterConfig(string filePath, List<string> configNames, string startMark, string endMark)
    {
        if (!File.Exists(filePath))
        {
            Console.WriteLine($@"
MapsterConfig.cs not found: {filePath}

Please create a file with the following code:

public interface IMapsterConfig
{{
    void Register(TypeAdapterConfig config);
}}

public static class MapsterConfig
{{
    public static void RegisterMappings()
    {{
        var config = TypeAdapterConfig.GlobalSettings;
        var configs = new List<IMapsterConfig>
        {{
            {startMark}
            {endMark}
        }};
        foreach (var mapConfig in configs)
        {{
            mapConfig.Register(config);
        }}
    }}
}}
");
            return;
        }

        var lines = File.ReadAllLines(filePath).ToList();
        int start = lines.FindIndex(l => l.Contains(startMark));
        int end = lines.FindIndex(l => l.Contains(endMark));

        if (start < 0 || end <= start)
        {
            Console.WriteLine("Cannot find injection markers. Please add:\n" +
                startMark + "\n" +
                endMark + "\n...to your MapsterConfig.cs");
            return;
        }

        var existing = lines
            .Skip(start + 1)
            .Take(end - start - 1)
            .Where(l => l.Trim().StartsWith("new") && l.Trim().EndsWith("(),"))
            .Select(l => l.Trim())
            .ToList();

        var injectLines = configNames
            .Select(name => $"            new {name}(),")
            .Where(line => !existing.Contains(line))
            .ToList();

        if (injectLines.Count == 0)
        {
            Console.WriteLine("No new MapsterConfig to inject.");
            return;
        }

        var existingSet = new HashSet<string>(existing.Select(x => x.Trim()), StringComparer.OrdinalIgnoreCase);

        var merged = existing
            .Concat(injectLines.Where(x => !existingSet.Contains(x.Trim())))
            .Distinct()
            .OrderBy(x => x)
            .ToList();

        lines.RemoveRange(start + 1, end - start - 1);
        lines.InsertRange(start + 1, merged);

        File.WriteAllLines(filePath, lines);
        Console.WriteLine($"Injected {injectLines.Count} new configs to MapsterConfig.cs");
    }
}
